// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fossapps/starter/db (interfaces: UserManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	db "github.com/fossapps/starter/db"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserManager is a mock of UserManager interface
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserManager) Create(arg0 db.User) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserManagerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManager)(nil).Create), arg0)
}

// Edit mocks base method
func (m *MockUserManager) Edit(arg0 string, arg1 db.User) error {
	ret := m.ctrl.Call(m, "Edit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockUserManagerMockRecorder) Edit(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserManager)(nil).Edit), arg0, arg1)
}

// FindByEmail mocks base method
func (m *MockUserManager) FindByEmail(arg0 string) *db.User {
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(*db.User)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockUserManagerMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserManager)(nil).FindByEmail), arg0)
}

// FindByID mocks base method
func (m *MockUserManager) FindByID(arg0 string) *db.User {
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*db.User)
	return ret0
}

// FindByID indicates an expected call of FindByID
func (mr *MockUserManagerMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserManager)(nil).FindByID), arg0)
}

// List mocks base method
func (m *MockUserManager) List() ([]db.User, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockUserManagerMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserManager)(nil).List))
}
