// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fossapps/starter/db (interfaces: IMigrationManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMigrationManager is a mock of IMigrationManager interface
type MockIMigrationManager struct {
	ctrl     *gomock.Controller
	recorder *MockIMigrationManagerMockRecorder
}

// MockIMigrationManagerMockRecorder is the mock recorder for MockIMigrationManager
type MockIMigrationManagerMockRecorder struct {
	mock *MockIMigrationManager
}

// NewMockIMigrationManager creates a new mock instance
func NewMockIMigrationManager(ctrl *gomock.Controller) *MockIMigrationManager {
	mock := &MockIMigrationManager{ctrl: ctrl}
	mock.recorder = &MockIMigrationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMigrationManager) EXPECT() *MockIMigrationManagerMockRecorder {
	return m.recorder
}

// MarkApplied mocks base method
func (m *MockIMigrationManager) MarkApplied(arg0, arg1 string) {
	m.ctrl.Call(m, "MarkApplied", arg0, arg1)
}

// MarkApplied indicates an expected call of MarkApplied
func (mr *MockIMigrationManagerMockRecorder) MarkApplied(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkApplied", reflect.TypeOf((*MockIMigrationManager)(nil).MarkApplied), arg0, arg1)
}

// ShouldRun mocks base method
func (m *MockIMigrationManager) ShouldRun(arg0 string) bool {
	ret := m.ctrl.Call(m, "ShouldRun", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRun indicates an expected call of ShouldRun
func (mr *MockIMigrationManagerMockRecorder) ShouldRun(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRun", reflect.TypeOf((*MockIMigrationManager)(nil).ShouldRun), arg0)
}
