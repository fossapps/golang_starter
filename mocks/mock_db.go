// Code generated by MockGen. DO NOT EDIT.
// Source: starter/db (interfaces: Db)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	db "starter/db"
)

// MockDb is a mock of Db interface
type MockDb struct {
	ctrl     *gomock.Controller
	recorder *MockDbMockRecorder
}

// MockDbMockRecorder is the mock recorder for MockDb
type MockDbMockRecorder struct {
	mock *MockDb
}

// NewMockDb creates a new mock instance
func NewMockDb(ctrl *gomock.Controller) *MockDb {
	mock := &MockDb{ctrl: ctrl}
	mock.recorder = &MockDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDb) EXPECT() *MockDbMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockDb) Clone() db.Db {
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(db.Db)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockDbMockRecorder) Clone() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockDb)(nil).Clone))
}

// Close mocks base method
func (m *MockDb) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDbMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDb)(nil).Close))
}

// Copy mocks base method
func (m *MockDb) Copy() db.Db {
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(db.Db)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockDbMockRecorder) Copy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockDb)(nil).Copy))
}

// Devices mocks base method
func (m *MockDb) Devices() db.IDeviceManager {
	ret := m.ctrl.Call(m, "Devices")
	ret0, _ := ret[0].(db.IDeviceManager)
	return ret0
}

// Devices indicates an expected call of Devices
func (mr *MockDbMockRecorder) Devices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockDb)(nil).Devices))
}

// Migrations mocks base method
func (m *MockDb) Migrations() db.IMigrationManager {
	ret := m.ctrl.Call(m, "Migrations")
	ret0, _ := ret[0].(db.IMigrationManager)
	return ret0
}

// Migrations indicates an expected call of Migrations
func (mr *MockDbMockRecorder) Migrations() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrations", reflect.TypeOf((*MockDb)(nil).Migrations))
}

// Permissions mocks base method
func (m *MockDb) Permissions() db.IPermissionManager {
	ret := m.ctrl.Call(m, "Permissions")
	ret0, _ := ret[0].(db.IPermissionManager)
	return ret0
}

// Permissions indicates an expected call of Permissions
func (mr *MockDbMockRecorder) Permissions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockDb)(nil).Permissions))
}

// RefreshTokens mocks base method
func (m *MockDb) RefreshTokens() db.IRefreshTokenManager {
	ret := m.ctrl.Call(m, "RefreshTokens")
	ret0, _ := ret[0].(db.IRefreshTokenManager)
	return ret0
}

// RefreshTokens indicates an expected call of RefreshTokens
func (mr *MockDbMockRecorder) RefreshTokens() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockDb)(nil).RefreshTokens))
}

// Users mocks base method
func (m *MockDb) Users() db.IUserManager {
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(db.IUserManager)
	return ret0
}

// Users indicates an expected call of Users
func (mr *MockDbMockRecorder) Users() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockDb)(nil).Users))
}
