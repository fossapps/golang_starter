// Code generated by MockGen. DO NOT EDIT.
// Source: starter/db (interfaces: IPermissionManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	db "starter/db"
)

// MockIPermissionManager is a mock of IPermissionManager interface
type MockIPermissionManager struct {
	ctrl     *gomock.Controller
	recorder *MockIPermissionManagerMockRecorder
}

// MockIPermissionManagerMockRecorder is the mock recorder for MockIPermissionManager
type MockIPermissionManagerMockRecorder struct {
	mock *MockIPermissionManager
}

// NewMockIPermissionManager creates a new mock instance
func NewMockIPermissionManager(ctrl *gomock.Controller) *MockIPermissionManager {
	mock := &MockIPermissionManager{ctrl: ctrl}
	mock.recorder = &MockIPermissionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPermissionManager) EXPECT() *MockIPermissionManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIPermissionManager) Create(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockIPermissionManagerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPermissionManager)(nil).Create), arg0, arg1)
}

// Exists mocks base method
func (m *MockIPermissionManager) Exists(arg0 string) bool {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockIPermissionManagerMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIPermissionManager)(nil).Exists), arg0)
}

// List mocks base method
func (m *MockIPermissionManager) List() ([]db.Permission, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockIPermissionManagerMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPermissionManager)(nil).List))
}
