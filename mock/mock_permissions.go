// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fossapps/starter/db (interfaces: PermissionManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	db "github.com/fossapps/starter/db"
	gomock "github.com/golang/mock/gomock"
)

// MockPermissionManager is a mock of PermissionManager interface
type MockPermissionManager struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionManagerMockRecorder
}

// MockPermissionManagerMockRecorder is the mock recorder for MockPermissionManager
type MockPermissionManagerMockRecorder struct {
	mock *MockPermissionManager
}

// NewMockPermissionManager creates a new mock instance
func NewMockPermissionManager(ctrl *gomock.Controller) *MockPermissionManager {
	mock := &MockPermissionManager{ctrl: ctrl}
	mock.recorder = &MockPermissionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPermissionManager) EXPECT() *MockPermissionManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPermissionManager) Create(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockPermissionManagerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionManager)(nil).Create), arg0, arg1)
}

// Exists mocks base method
func (m *MockPermissionManager) Exists(arg0 string) bool {
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockPermissionManagerMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPermissionManager)(nil).Exists), arg0)
}

// List mocks base method
func (m *MockPermissionManager) List() ([]db.Permission, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPermissionManagerMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionManager)(nil).List))
}
