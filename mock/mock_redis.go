// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fossapps/starter/rate (interfaces: RedisClient)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisClient is a mock of RedisClient interface
type MockRedisClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisClientMockRecorder
}

// MockRedisClientMockRecorder is the mock recorder for MockRedisClient
type MockRedisClientMockRecorder struct {
	mock *MockRedisClient
}

// NewMockRedisClient creates a new mock instance
func NewMockRedisClient(ctrl *gomock.Controller) *MockRedisClient {
	mock := &MockRedisClient{ctrl: ctrl}
	mock.recorder = &MockRedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisClient) EXPECT() *MockRedisClientMockRecorder {
	return m.recorder
}

// Expire mocks base method
func (m *MockRedisClient) Expire(arg0 string, arg1 time.Duration) (bool, error) {
	ret := m.ctrl.Call(m, "Expire", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expire indicates an expected call of Expire
func (mr *MockRedisClientMockRecorder) Expire(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisClient)(nil).Expire), arg0, arg1)
}

// ZAdd mocks base method
func (m *MockRedisClient) ZAdd(arg0 string, arg1 ...redis.Z) (int64, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd
func (mr *MockRedisClientMockRecorder) ZAdd(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockRedisClient)(nil).ZAdd), varargs...)
}

// ZCard mocks base method
func (m *MockRedisClient) ZCard(arg0 string) (int64, error) {
	ret := m.ctrl.Call(m, "ZCard", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard
func (mr *MockRedisClientMockRecorder) ZCard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockRedisClient)(nil).ZCard), arg0)
}

// ZRemRangeByScore mocks base method
func (m *MockRedisClient) ZRemRangeByScore(arg0, arg1, arg2 string) (int64, error) {
	ret := m.ctrl.Call(m, "ZRemRangeByScore", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore
func (mr *MockRedisClientMockRecorder) ZRemRangeByScore(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockRedisClient)(nil).ZRemRangeByScore), arg0, arg1, arg2)
}
