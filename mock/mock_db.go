// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fossapps/starter/db (interfaces: DB)

// Package mock is a generated GoMock package.
package mock

import (
	db "github.com/fossapps/starter/db"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockDB) Clone() db.DB {
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockDBMockRecorder) Clone() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockDB)(nil).Clone))
}

// Close mocks base method
func (m *MockDB) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Copy mocks base method
func (m *MockDB) Copy() db.DB {
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockDBMockRecorder) Copy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockDB)(nil).Copy))
}

// Devices mocks base method
func (m *MockDB) Devices() db.DeviceManager {
	ret := m.ctrl.Call(m, "Devices")
	ret0, _ := ret[0].(db.DeviceManager)
	return ret0
}

// Devices indicates an expected call of Devices
func (mr *MockDBMockRecorder) Devices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockDB)(nil).Devices))
}

// Migrations mocks base method
func (m *MockDB) Migrations() db.MigrationManager {
	ret := m.ctrl.Call(m, "Migrations")
	ret0, _ := ret[0].(db.MigrationManager)
	return ret0
}

// Migrations indicates an expected call of Migrations
func (mr *MockDBMockRecorder) Migrations() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrations", reflect.TypeOf((*MockDB)(nil).Migrations))
}

// Permissions mocks base method
func (m *MockDB) Permissions() db.PermissionManager {
	ret := m.ctrl.Call(m, "Permissions")
	ret0, _ := ret[0].(db.PermissionManager)
	return ret0
}

// Permissions indicates an expected call of Permissions
func (mr *MockDBMockRecorder) Permissions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permissions", reflect.TypeOf((*MockDB)(nil).Permissions))
}

// RefreshTokens mocks base method
func (m *MockDB) RefreshTokens() db.RefreshTokenManager {
	ret := m.ctrl.Call(m, "RefreshTokens")
	ret0, _ := ret[0].(db.RefreshTokenManager)
	return ret0
}

// RefreshTokens indicates an expected call of RefreshTokens
func (mr *MockDBMockRecorder) RefreshTokens() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockDB)(nil).RefreshTokens))
}

// Users mocks base method
func (m *MockDB) Users() db.UserManager {
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(db.UserManager)
	return ret0
}

// Users indicates an expected call of Users
func (mr *MockDBMockRecorder) Users() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockDB)(nil).Users))
}
