// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fossapps/starter/db (interfaces: MigrationManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMigrationManager is a mock of MigrationManager interface
type MockMigrationManager struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationManagerMockRecorder
}

// MockMigrationManagerMockRecorder is the mock recorder for MockMigrationManager
type MockMigrationManagerMockRecorder struct {
	mock *MockMigrationManager
}

// NewMockMigrationManager creates a new mock instance
func NewMockMigrationManager(ctrl *gomock.Controller) *MockMigrationManager {
	mock := &MockMigrationManager{ctrl: ctrl}
	mock.recorder = &MockMigrationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationManager) EXPECT() *MockMigrationManagerMockRecorder {
	return m.recorder
}

// MarkApplied mocks base method
func (m *MockMigrationManager) MarkApplied(arg0, arg1 string) {
	m.ctrl.Call(m, "MarkApplied", arg0, arg1)
}

// MarkApplied indicates an expected call of MarkApplied
func (mr *MockMigrationManagerMockRecorder) MarkApplied(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkApplied", reflect.TypeOf((*MockMigrationManager)(nil).MarkApplied), arg0, arg1)
}

// ShouldRun mocks base method
func (m *MockMigrationManager) ShouldRun(arg0 string) bool {
	ret := m.ctrl.Call(m, "ShouldRun", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldRun indicates an expected call of ShouldRun
func (mr *MockMigrationManagerMockRecorder) ShouldRun(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRun", reflect.TypeOf((*MockMigrationManager)(nil).ShouldRun), arg0)
}
